{"version":3,"sources":["images/robot.png","images/angry.png","images/happy.png","images/smiling.png","images/surprised.png","images/thinking.png","images/upset.png","components/robot.component.js","components/emo.buttons.js","components/popup.emo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Robot","id","className","src","robot","alt","Component","Buttons","angry","happy","thinking","smiling","surprised","upset","PopUpWindow","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,0LCItBC,E,iLAEnB,OACC,yBAAKC,GAAG,gBACP,yBAAKC,UAAU,gBACd,gCAAYA,UAAU,gBACrB,iDAGF,yBAAKA,UAAU,QAAQC,IAAKC,IAAOC,IAAI,e,GATRC,a,qGCIdC,E,iLAEjB,OACE,yBAAKN,GAAG,eACN,yBAAKC,UAAU,cACb,yBAAKA,UAAU,OAAM,yBAAKC,IAAKK,IAAOH,IAAI,eAC1C,yBAAKH,UAAU,oBAAmB,yBAAKC,IAAKM,IAAOJ,IAAI,eACvD,yBAAKH,UAAU,OAAM,yBAAKC,IAAKO,IAAUL,IAAI,mBAE/C,yBAAKH,UAAU,eACb,yBAAKA,UAAU,OAAM,yBAAKC,IAAKQ,IAASN,IAAI,iBAC5C,yBAAKH,UAAU,qBAAoB,yBAAKC,IAAKS,IAAWP,IAAI,mBAC5D,yBAAKH,UAAU,OAAM,yBAAKC,IAAKU,IAAOR,IAAI,qB,GAZfC,aCNhBQ,E,iLAEjB,OACE,kC,GAHmCR,aCc1BS,MAVf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c748771.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.9eb80570.png\";","module.exports = __webpack_public_path__ + \"static/media/angry.216ec719.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.0242cea7.png\";","module.exports = __webpack_public_path__ + \"static/media/smiling.5bba4d69.png\";","module.exports = __webpack_public_path__ + \"static/media/surprised.4087931a.png\";","module.exports = __webpack_public_path__ + \"static/media/thinking.a7684cff.png\";","module.exports = __webpack_public_path__ + \"static/media/upset.7081abc5.png\";","import React, { Component } from 'react';\r\nimport robot from '../images/robot.png';\r\n\r\n\r\nexport default class Robot extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"robot_wraper\">\r\n\t\t\t\t<div className=\"quote_wraper\">\r\n\t\t\t\t\t<blockquote className=\"oval-thought\">\r\n\t\t\t\t\t\t<p>Hello my friend!</p>\r\n\t\t\t\t\t</blockquote>\r\n\t\t\t\t</div>\r\n\t\t\t\t<img className=\"robot\" src={robot} alt=\"robot\" />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport angry from '../images/angry.png';\r\nimport happy from '../images/happy.png';\r\nimport smiling from '../images/smiling.png';\r\nimport surprised from '../images/surprised.png';\r\nimport thinking from '../images/thinking.png';\r\nimport upset from '../images/upset.png';\r\n\r\nexport default class Buttons extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"btn_wrapper\">\r\n        <div className=\"left_block\">\r\n          <div className=\"btn\"><img src={angry} alt=\"angry kid\" /></div>\r\n          <div className=\"btn central_left\"><img src={happy} alt=\"happy kid\" /></div>\r\n          <div className=\"btn\"><img src={thinking} alt=\"thinking kid\" /></div>\r\n           </div>\r\n        <div className=\"right_block\">\r\n          <div className=\"btn\"><img src={smiling} alt=\"smiling kid\" /></div>\r\n          <div className=\"btn central_right\"><img src={surprised} alt=\"surprised kid\" /></div>\r\n          <div className=\"btn\"><img src={upset} alt=\"upset kid\" /></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class PopUpWindow extends Component {\r\n  render() {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.scss';\nimport Robot from './components/robot.component';\nimport Buttons from './components/emo.buttons'\nimport PopUpWindow from './components/popup.emo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Robot/>\n      <Buttons/>\n      <PopUpWindow/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}